/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.1.4 -I -o ./src/components/SubwayModel.tsx -t -s -r models ./static/models/subway-bake.gltf
*/

import type * as THREE from 'three';
import React, { useMemo, useContext, createContext } from 'react';
import { useGLTF, Merged } from '@react-three/drei';
import type { GLTF } from 'three-stdlib';

type GLTFResult = GLTF & {
  nodes: {
    Cube: THREE.Mesh;
  };
  materials: {
    ['Material.001']: THREE.MeshPhysicalMaterial;
  };
};

const context = createContext<any>(undefined);
export function Instances({ children, ...props }: any) {
  const { nodes } = useGLTF('/models/subway.glb') as GLTFResult;
  const instances = useMemo(
    () => ({
      Cube: nodes.Cube,
    }),
    [nodes],
  );
  return (
    <Merged meshes={instances} {...props}>
      {(instances) => (
        <context.Provider value={instances} children={children} />
      )}
    </Merged>
  );
}

export function Model(props: JSX.IntrinsicElements['group']) {
  const instances = useContext(context);
  return (
    <group {...props} dispose={null}>
      <instances.Cube />
    </group>
  );
}

useGLTF.preload('/models/subway.glb');
